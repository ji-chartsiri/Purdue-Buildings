{"ast":null,"code":"function _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nimport { CircleMarker as LeafletCircleMarker } from 'leaflet';\nimport PropTypes from 'prop-types';\nimport Path from './Path';\nimport children from './propTypes/children';\nimport latlng from './propTypes/latlng';\nimport layer from './propTypes/layer';\n\nvar CircleMarker = function (_Path) {\n  _inherits(CircleMarker, _Path);\n\n  function CircleMarker() {\n    _classCallCheck(this, CircleMarker);\n\n    return _possibleConstructorReturn(this, _Path.apply(this, arguments));\n  }\n\n  CircleMarker.prototype.getChildContext = function getChildContext() {\n    return {\n      popupContainer: this.leafletElement\n    };\n  };\n\n  CircleMarker.prototype.createLeafletElement = function createLeafletElement(props) {\n    return new LeafletCircleMarker(props.center, this.getOptions(props));\n  };\n\n  CircleMarker.prototype.updateLeafletElement = function updateLeafletElement(fromProps, toProps) {\n    if (toProps.center !== fromProps.center) {\n      this.leafletElement.setLatLng(toProps.center);\n    }\n\n    if (toProps.radius !== fromProps.radius) {\n      this.leafletElement.setRadius(toProps.radius);\n    }\n  };\n\n  return CircleMarker;\n}(Path);\n\nCircleMarker.propTypes = {\n  center: latlng.isRequired,\n  children: children,\n  radius: PropTypes.number\n};\nCircleMarker.childContextTypes = {\n  popupContainer: layer\n};\nexport default CircleMarker;","map":null,"metadata":{},"sourceType":"module"}