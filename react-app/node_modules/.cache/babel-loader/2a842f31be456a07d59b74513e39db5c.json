{"ast":null,"code":"function _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nimport { Icon, Marker as LeafletMarker } from 'leaflet';\nimport PropTypes from 'prop-types';\nimport MapLayer from './MapLayer';\nimport children from './propTypes/children';\nimport latlng from './propTypes/latlng';\nimport layer from './propTypes/layer';\n\nvar Marker = function (_MapLayer) {\n  _inherits(Marker, _MapLayer);\n\n  function Marker() {\n    _classCallCheck(this, Marker);\n\n    return _possibleConstructorReturn(this, _MapLayer.apply(this, arguments));\n  }\n\n  Marker.prototype.getChildContext = function getChildContext() {\n    return {\n      popupContainer: this.leafletElement\n    };\n  };\n\n  Marker.prototype.createLeafletElement = function createLeafletElement(props) {\n    return new LeafletMarker(props.position, this.getOptions(props));\n  };\n\n  Marker.prototype.updateLeafletElement = function updateLeafletElement(fromProps, toProps) {\n    if (toProps.position !== fromProps.position) {\n      this.leafletElement.setLatLng(toProps.position);\n    }\n\n    if (toProps.icon !== fromProps.icon) {\n      this.leafletElement.setIcon(toProps.icon);\n    }\n\n    if (toProps.zIndexOffset !== fromProps.zIndexOffset) {\n      this.leafletElement.setZIndexOffset(toProps.zIndexOffset);\n    }\n\n    if (toProps.opacity !== fromProps.opacity) {\n      this.leafletElement.setOpacity(toProps.opacity);\n    }\n\n    if (toProps.draggable !== fromProps.draggable) {\n      if (toProps.draggable === true) {\n        this.leafletElement.dragging.enable();\n      } else {\n        this.leafletElement.dragging.disable();\n      }\n    }\n  };\n\n  return Marker;\n}(MapLayer);\n\nMarker.propTypes = {\n  children: children,\n  draggable: PropTypes.bool,\n  icon: PropTypes.instanceOf(Icon),\n  opacity: PropTypes.number,\n  position: latlng.isRequired,\n  zIndexOffset: PropTypes.number\n};\nMarker.childContextTypes = {\n  popupContainer: layer\n};\nexport default Marker;","map":null,"metadata":{},"sourceType":"module"}