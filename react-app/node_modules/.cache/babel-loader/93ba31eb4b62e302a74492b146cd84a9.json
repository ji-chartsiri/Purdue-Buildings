{"ast":null,"code":"function _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nimport PropTypes from 'prop-types';\nimport { Children } from 'react';\nimport { render, unmountComponentAtNode } from 'react-dom';\nimport MapComponent from './MapComponent';\nimport updateClassName from './utils/updateClassName';\n\nvar DivOverlay = function (_MapComponent) {\n  _inherits(DivOverlay, _MapComponent);\n\n  function DivOverlay() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, DivOverlay);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _MapComponent.call.apply(_MapComponent, [this].concat(args))), _this), _this.onClose = function () {\n      _this.removeContent();\n\n      if (_this.props.onClose) {\n        _this.props.onClose();\n      }\n    }, _this.onOpen = function () {\n      _this.renderContent();\n\n      if (_this.props.onOpen) {\n        _this.props.onOpen();\n      }\n    }, _this.renderContent = function () {\n      if (_this.props.children == null) {\n        _this.removeContent();\n      } else {\n        render(Children.only(_this.props.children), _this.leafletElement._contentNode, function () {\n          _this.leafletElement.update();\n\n          _this.onRender();\n        });\n      }\n    }, _this.removeContent = function () {\n      if (_this.leafletElement._contentNode) {\n        unmountComponentAtNode(_this.leafletElement._contentNode);\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  DivOverlay.prototype.updateLeafletElement = function updateLeafletElement(prevProps, props) {}; // eslint-disable-line\n\n\n  DivOverlay.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    updateClassName(this.leafletElement._container, prevProps.className, this.props.className);\n    this.updateLeafletElement(prevProps, this.props);\n\n    if (this.leafletElement.isOpen()) {\n      this.renderContent();\n    }\n  };\n\n  DivOverlay.prototype.onRender = function onRender() {};\n\n  DivOverlay.prototype.render = function render() {\n    return null;\n  };\n\n  return DivOverlay;\n}(MapComponent);\n\nDivOverlay.propTypes = {\n  children: PropTypes.node,\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func\n};\nexport default DivOverlay;","map":null,"metadata":{},"sourceType":"module"}