{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nrequire('babel-polyfill');\n\nvar _leaflet = require('leaflet');\n\nvar _leaflet2 = _interopRequireDefault(_leaflet);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * A utility class, nothing to see here, keep moving.\n * 2018\n *\n * Use of this source code is governed by a MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n *\n * @author Alexandre Moraes | github.com/alcmoraes\n * \n */\n\n\nvar Utils = function () {\n  function Utils() {\n    _classCallCheck(this, Utils);\n  }\n\n  _createClass(Utils, [{\n    key: 'areCoordinatesDistantEnough',\n\n    /**\n     * Compare two coordinates and determine if they're\n     * distant enough to trigger the animation routine\n     *\n     * @param {L.LatLng} coord_one The first coordinate\n     * @param {L.LatLng} coord_two The coordinate to compare\n     * @return {boolean}\n     */\n    value: function areCoordinatesDistantEnough(coord_one, coord_two) {\n      return JSON.stringify(coord_one.lat.toString().substring(8, 3)) !== JSON.stringify(coord_two.lat.toString().substring(8, 3));\n    }\n    /**\n     * Animate a leaflet element marker between two coordinates\n     *\n     * @param {L} leafletElement The leaflet element from marker\n     * @param {L.LatLng} coordFrom The coordinate to go from\n     * @param {L.LatLng} coordTo The coordinate to go to\n     */\n\n  }, {\n    key: 'animateMarker',\n    value: function animateMarker(leafletElement, coordFrom, coordTo) {\n      var position = void 0;\n      var movingInterval = void 0;\n      var curLat = coordFrom.lat;\n      var curLng = coordFrom.lng;\n      var newLat = coordTo.lat;\n      var newLng = coordTo.lng;\n      var threshold = 0.01;\n      movingInterval = setInterval(function () {\n        if (threshold >= 1) clearInterval(movingInterval);\n        position = new _leaflet2.default.LatLng(curLat + (newLat - curLat) * threshold, curLng + (newLng - curLng) * threshold);\n        leafletElement.setLatLng(position);\n        threshold += 0.1;\n      }, 400);\n    }\n  }]);\n\n  return Utils;\n}();\n\nexports.default = new Utils();","map":null,"metadata":{},"sourceType":"script"}